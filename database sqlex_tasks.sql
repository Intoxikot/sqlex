/*

db(id, name) - списки базы данных, каждая задача относится к определенной базе данных
stage(id, name) - этапы/уровни задач, каждая задача может принадлежать к определенному этапу (тренировочные, рейтинговые и так далее) 
task(id, db_id, stage_id, description) - содержит списки задач - описание задачи с указанием базы данных, к которой задача относится
user(id, name) - имя пользователя (логин) на сайте (в данном случае он один, в теории их может быть сколь угодно много)
progress(user_id, task_id, solved) - дата решения задачи с привязкой к задаче и пользователю

Примечание: в конце приводятся статистические запросы по прогрессу выполнения заданий (список прогресса решения по задачам, количество решенных задач по дням, количество решенных задач по базам данных и т.д.)

*/

-- Подготовка базы данных
create database if not exists sqlex_tasks default character set utf8;
use sqlex_tasks;

drop table if exists db;
drop table if exists task;
drop table if exists user;
drop table if exists progress; 

-- Таблица списка баз данных
create table if not exists db (
	id int unsigned auto_increment not null,
	name varchar(20) not null,
	primary key (id)
);

-- Таблица списка этапов
create table if not exists stage (
  id int unsigned auto_increment not null,
  name varchar(20) not null,
  primary key (id)
);

-- Таблица списка задач
create table task (
	id int unsigned auto_increment not null,
	stage_id int null,
	description text not null,
	db_id int unsigned, 
	primary key (id)
);

-- Таблица списка пользователей
create table user (
	id int unsigned auto_increment not null,
	name varchar(20) not null,
	primary key (id)
);

-- Таблица прогресса решения
create table progress (
	user_id int unsigned not null,
	task_id int unsigned not null,
	solved date not null,
	primary key (user_id, task_id);
);

-- Заполнить список базы данных
insert into db(name) values('product');
insert into db(name) values('ships');
insert into db(name) values('recyclables');
insert into db(name) values('aeroflot');
insert into db(name) values('coloring');

-- Заполнить список этапов
insert into stage(name) VALUES ('edu');
insert into stage(name) VALUES ('dml');
insert into stage(name) VALUES ('rate');

-- Добавить пользователя
insert into user(name) values('koteev');

-- Добавить задачи
insert into task(description, db_id) values (
'Задание: 1 (Serge I: 2002-09-30)
Найдите номер модели, скорость и размер жесткого диска для всех ПК стоимостью менее 500 дол. Вывести: model, speed и hd', 1);
insert into task(description, db_id) values (
'Задание: 2 (Serge I: 2002-09-21)
Найдите производителей принтеров. Вывести: maker', 
1);
insert into task(description, db_id) values (
'Задание: 3 (Serge I: 2002-09-30)
Найдите номер модели, объем памяти и размеры экранов ПК-блокнотов, цена которых превышает 1000 дол.', 
1);
insert into task(description, db_id) values (
'Задание: 4 (Serge I: 2002-09-21)
Найдите все записи таблицы Printer для цветных принтеров.',
1);
insert into task(description, db_id) values (
'Задание: 5 (Serge I: 2002-09-30)
Найдите номер модели, скорость и размер жесткого диска ПК, имеющих 12x или 24x CD и цену менее 600 дол.',
1);
insert into task(description, db_id) values (
'Задание: 6 (Serge I: 2002-10-28)
Для каждого производителя, выпускающего ПК-блокноты c объёмом жесткого диска не менее 10 Гбайт, найти скорости таких ПК-блокнотов. Вывод: производитель, скорость.',
1);
insert into task(description, db_id) values (
'Задание: 7 (Serge I: 2002-11-02)
Найдите номера моделей и цены всех имеющихся в продаже продуктов (любого типа) производителя B (латинская буква).',
1);
insert into task(description, db_id) values (
'Задание: 8 (Serge I: 2003-02-03)
Найдите производителя, выпускающего ПК, но не ПК-блокноты.',
1);
insert into task(description, db_id) values (
'Задание: 9 (Serge I: 2002-11-02)
Найдите производителей ПК с процессором не менее 450 Мгц. Вывести: Maker',
1);
insert into task(description, db_id) values (
'Задание: 10 (Serge I: 2002-09-23)
Найдите модели принтеров, имеющих самую высокую цену. Вывести: model, price',
1);
insert into task(description, db_id) values (
'Задание: 11 (Serge I: 2002-11-02)
Найдите среднюю скорость ПК.',
1);
insert into task(description, db_id) values (
'Задание: 12 (Serge I: 2002-11-02)
Найдите среднюю скорость ПК-блокнотов, цена которых превышает 1000 дол.',
1);
insert into task(description, db_id) values (
'Задание: 13 (Serge I: 2002-11-02)
Найдите среднюю скорость ПК, выпущенных производителем A.',
1);
insert into task(description, db_id) values (
'Задание: 14 (Serge I: 2002-11-05)
Найдите класс, имя и страну для кораблей из таблицы Ships, имеющих не менее 10 орудий.',
2);
insert into task(description, db_id) values (
'Задание: 15 (Serge I: 2003-02-03)
Найдите размеры жестких дисков, совпадающих у двух и более PC. Вывести: HD',
1);
insert into task(description, db_id) values (
'Задание: 16 (Serge I: 2003-02-03)
Найдите пары моделей PC, имеющих одинаковые скорость и RAM. В результате каждая пара указывается только один раз, т.е. (i,j), но не (j,i), Порядок вывода: модель с большим номером, модель с меньшим номером, скорость и RAM.',
1);
insert into task(description, db_id) values (
'Задание: 17 (Serge I: 2003-02-03)
Найдите модели ПК-блокнотов, скорость которых меньше скорости каждого из ПК.
Вывести: type, model, speed',
1);
insert into task(description, db_id) values (
'Задание: 18 (Serge I: 2003-02-03)
Найдите производителей самых дешевых цветных принтеров. Вывести: maker, price',
1);
insert into task(description, db_id) values (
'Задание: 19 (Serge I: 2003-02-13)
Для каждого производителя, имеющего модели в таблице Laptop, найдите средний размер экрана выпускаемых им ПК-блокнотов. Вывести: maker, средний размер экрана.',
1);
insert into task(description, db_id) values (
'Задание: 20 (Serge I: 2003-02-13)
Найдите производителей, выпускающих по меньшей мере три различных модели ПК. Вывести: Maker, число моделей ПК.',
1);
insert into task(description, db_id) values (
'Задание: 21 (Serge I: 2003-02-13)
Найдите максимальную цену ПК, выпускаемых каждым производителем, у которого есть модели в таблице PC.
Вывести: maker, максимальная цена.',
1);
insert into task(description, db_id) values (
'Задание: 22 (Serge I: 2003-02-13)
Для каждого значения скорости ПК, превышающего 600 МГц, определите среднюю цену ПК с такой же скоростью. Вывести: speed, средняя цена.',
1);
insert into task(description, db_id) values (
'Задание: 23 (Serge I: 2003-02-14)
Найдите производителей, которые производили бы как ПК
со скоростью не менее 750 МГц, так и ПК-блокноты со скоростью не менее 750 МГц.
Вывести: Maker',
1);
insert into task(description, db_id) values (
'Задание: 24 (Serge I: 2003-02-03)
Перечислите номера моделей любых типов, имеющих самую высокую цену по всей имеющейся в базе данных продукции.',
1);
insert into task(description, db_id) values (
'Задание: 25 (Serge I: 2003-02-14)
Найдите производителей принтеров, которые производят ПК с наименьшим объемом RAM и с самым быстрым процессором среди всех ПК, имеющих наименьший объем RAM. Вывести: Maker',
1);
insert into task(description, db_id) values (
'Задание: 26 (Serge I: 2003-02-14)
Найдите среднюю цену ПК и ПК-блокнотов, выпущенных производителем A (латинская буква). Вывести: одна общая средняя цена.',
1);
insert into task(description, db_id) values (
'Задание: 27 (Serge I: 2003-02-03)
Найдите средний размер диска ПК каждого из тех производителей, которые выпускают и принтеры. Вывести: maker, средний размер HD.',
1);
insert into task(description, db_id) values (
'Задание: 28 (Serge I: 2012-05-04)
Используя таблицу Product, определить количество производителей, выпускающих по одной модели.',
1);
insert into task(description, db_id) values (
'Задание: 29 (Serge I: 2003-02-14)
В предположении, что приход и расход денег на каждом пункте приема фиксируется не чаще одного раза в день [т.е. первичный ключ (пункт, дата)], написать запрос с выходными данными (пункт, дата, приход, расход). Использовать таблицы Income_o и Outcome_o.',
3);
insert into task(description, db_id) values (
'Задание: 30 (Serge I: 2003-02-14)
В предположении, что приход и расход денег на каждом пункте приема фиксируется произвольное число раз (первичным ключом в таблицах является столбец code), требуется получить таблицу, в которой каждому пункту за каждую дату выполнения операций будет соответствовать одна строка.
Вывод: point, date, суммарный расход пункта за день (out), суммарный приход пункта за день (inc). Отсутствующие значения считать неопределенными (NULL).',
3);
insert into task(description, db_id) values (
'Задание: 31 (Serge I: 2002-10-22)
Для классов кораблей, калибр орудий которых не менее 16 дюймов, укажите класс и страну.',
2);
insert into task(description, db_id) values (
'Задание: 32 (Serge I: 2003-02-17)
Одной из характеристик корабля является половина куба калибра его главных орудий (mw). С точностью до 2 десятичных знаков определите среднее значение mw для кораблей каждой страны, у которой есть корабли в базе данных.', 
2);
insert into task(description, db_id) values (
'Задание: 33 (Serge I: 2002-11-02)
Укажите корабли, потопленные в сражениях в Северной Атлантике (North Atlantic). Вывод: ship.',
2);
insert into task(description, db_id) values (
'Задание: 34 (Serge I: 2002-11-04)
По Вашингтонскому международному договору от начала 1922 г. запрещалось строить линейные корабли водоизмещением более 35 тыс.тонн. Укажите корабли, нарушившие этот договор (учитывать только корабли c известным годом спуска на воду). Вывести названия кораблей.',
2);
insert into task(description, db_id) values (
'Задание: 35 (qwrqwr: 2012-11-23)
В таблице Product найти модели, которые состоят только из цифр или только из латинских букв (A-Z, без учета регистра). Вывод: номер модели, тип модели.',
1);
insert into task(description, db_id) values (
'Задание: 36 (Serge I: 2003-02-17)
Перечислите названия головных кораблей, имеющихся в базе данных (учесть корабли в Outcomes).',
2);
insert into task(description, db_id) values (
'Задание: 37 (Serge I: 2003-02-17)
Найдите классы, в которые входит только один корабль из базы данных (учесть также корабли в Outcomes).',
2);
insert into task(description, db_id) values (
'Задание: 38 (Serge I: 2003-02-19)
Найдите страны, имевшие когда-либо классы обычных боевых кораблей (bb) и имевшие когда-либо классы крейсеров (bc).',
2);
insert into task(description, db_id) values (
'Задание: 39 (Serge I: 2003-02-14)
Найдите корабли, `сохранившиеся для будущих сражений`; т.е. выведенные из строя в одной битве (damaged), они участвовали в другой, произошедшей позже.',
2);
insert into task(description, db_id) values (
'Задание: 40 (Serge I: 2012-04-20)
Найти производителей, которые выпускают более одной модели, при этом все выпускаемые производителем модели являются продуктами одного типа. Вывести: maker, type',
1);
insert into task(description, db_id) values (
'Задание: 41 (Serge I: 2019-05-31)
Для каждого производителя, у которого присутствуют модели хотя бы в одной из таблиц PC, Laptop или Printer,
определить максимальную цену на его продукцию.
Вывод: имя производителя, если среди цен на продукцию данного производителя присутствует NULL, то выводить для этого производителя NULL,
иначе максимальную цену.',
1);
insert into task(description, db_id) values (
'Задание: 42 (Serge I: 2002-11-05)
Найдите названия кораблей, потопленных в сражениях, и название сражения, в котором они были потоплены.',
2);
insert into task(description, db_id) values (
'Задание: 43 (qwrqwr: 2011-10-28)
Укажите сражения, которые произошли в годы, не совпадающие ни с одним из годов спуска кораблей на воду.',
2);
insert into task(description, db_id) values (
'Задание: 44 (Serge I: 2002-12-04)
Найдите названия всех кораблей в базе данных, начинающихся с буквы R.', 
2);
insert into task(description, db_id) values (
'Задание: 45 (Serge I: 2002-12-04)
Найдите названия всех кораблей в базе данных, состоящие из трех и более слов (например, King George V).
Считать, что слова в названиях разделяются единичными пробелами, и нет концевых пробелов.',
2);
insert into task(description, db_id) values (
'Задание: 46 (Serge I: 2003-02-14)
Для каждого корабля, участвовавшего в сражении при Гвадалканале (Guadalcanal), вывести название, водоизмещение и число орудий.',
2);
insert into task(description, db_id) values (
'Задание: 47 (Serge I: 2019-06-07)
Определить страны, которые потеряли в сражениях все свои корабли.',
2);
insert into task(description, db_id) values (
'Задание: 48 (Serge I: 2003-02-16)
Найдите классы кораблей, в которых хотя бы один корабль был потоплен в сражении.',
2);
insert into task(description, db_id) values (
'Задание: 49 (Serge I: 2003-02-17)
Найдите названия кораблей с орудиями калибра 16 дюймов (учесть корабли из таблицы Outcomes).',
2);
insert into task(description, db_id) values (
'Задание: 50 (Serge I: 2002-11-05)
Найдите сражения, в которых участвовали корабли класса Kongo из таблицы Ships.',
2);
insert into task(description, db_id) values (
'Задание: 51 (Serge I: 2003-02-17)
Найдите названия кораблей, имеющих наибольшее число орудий среди всех имеющихся кораблей такого же водоизмещения (учесть корабли из таблицы Outcomes).',
2);
insert into task(description, db_id) values (
'Задание: 52 (qwrqwr: 2010-04-23)
Определить названия всех кораблей из таблицы Ships, которые могут быть линейным японским кораблем,
имеющим число главных орудий не менее девяти, калибр орудий менее 19 дюймов и водоизмещение не более 65 тыс.тонн',
2);
insert into task(description, db_id) values (
'Задание: 53 (Serge I: 2002-11-05)
Определите среднее число орудий для классов линейных кораблей.
Получить результат с точностью до 2-х десятичных знаков.',
2);
insert into task(description, db_id) values (
'Задание: 54 (Serge I: 2003-02-14)
С точностью до 2-х десятичных знаков определите среднее число орудий всех линейных кораблей (учесть корабли из таблицы Outcomes).',
2);
insert into task(description, db_id) values (
'Задание: 55 (Serge I: 2003-02-16)
Для каждого класса определите год, когда был спущен на воду первый корабль этого класса. Если год спуска на воду головного корабля неизвестен, определите минимальный год спуска на воду кораблей этого класса. Вывести: класс, год.',
2);
insert into task(description, db_id) values (
'Задание: 56 (Serge I: 2003-02-16)
Для каждого класса определите число кораблей этого класса, потопленных в сражениях. Вывести: класс и число потопленных кораблей.',
2);
insert into task(description, db_id) values (
'Задание: 57 (Serge I: 2003-02-14)
Для классов, имеющих потери в виде потопленных кораблей и не менее 3 кораблей в базе данных, вывести имя класса и число потопленных кораблей.',
2);
insert into task(description, db_id) values (
'Задание: 58 (Serge I: 2009-11-13)
Для каждого типа продукции и каждого производителя из таблицы Product c точностью до двух десятичных знаков найти процентное отношение числа моделей данного типа данного производителя к общему числу моделей этого производителя. Вывод: maker, type, процентное отношение числа моделей данного типа к общему числу моделей производителя',
1);
insert into task(description, db_id) values (
'Задание: 59 (Serge I: 2003-02-15)
Посчитать остаток денежных средств на каждом пункте приема для базы данных с отчетностью не чаще одного раза в день. Вывод: пункт, остаток.',
3);
insert into task(description, db_id) values (
'Задание: 60 (Serge I: 2003-02-15)
Посчитать остаток денежных средств на начало дня 15/04/01 на каждом пункте приема для базы данных с отчетностью не чаще одного раза в день. Вывод: пункт, остаток.
Замечание. Не учитывать пункты, информации о которых нет до указанной даты.',
3);
insert into task(description, db_id) values (
'Задание: 61 (Serge I: 2003-02-14)
Посчитать остаток денежных средств на всех пунктах приема для базы данных с отчетностью не чаще одного раза в день.',
3);
insert into task(description, db_id) values (
'Задание: 62 (Serge I: 2003-02-15)
Посчитать остаток денежных средств на всех пунктах приема на начало дня 15/04/01 для базы данных с отчетностью не чаще одного раза в день.',
3);
insert into task(description, db_id) values (
'Задание: 63 (Serge I: 2003-04-08)
Определить имена разных пассажиров, когда-либо летевших на одном и том же месте более одного раза.',
4);
insert into task(description, db_id) values (
'Задание: 64 (Serge I: 2010-06-04)
Используя таблицы Income и Outcome, для каждого пункта приема определить дни, когда был приход, но не было расхода и наоборот. Вывод: пункт, дата, тип операции (inc/out), денежная сумма за день.',
3);
insert into task(description, db_id) values (
'Задание: 65 (Serge I: 2009-08-24)
Пронумеровать уникальные пары {maker, type} из Product, упорядочив их следующим образом:
- имя производителя (maker) по возрастанию;
- тип продукта (type) в порядке PC, Laptop, Printer.
Если некий производитель выпускает несколько типов продукции, то выводить его имя только в первой строке;
остальные строки для ЭТОГО производителя должны содержать пустую строку символов.',
1);
insert into task(description, db_id) values (
'Задание: 66 (Serge I: 2003-04-09)
Для всех дней в интервале с 01/04/2003 по 07/04/2003 определить число рейсов из Rostov.
Вывод: дата, количество рейсов',
4);
insert into task(description, db_id) values (
'Задание: 67 (Serge I: 2010-03-27)
Найти количество маршрутов, которые обслуживаются наибольшим числом рейсов.
Замечания:
1) A - B и B - A считать РАЗНЫМИ маршрутами.
2) Использовать только таблицу Trip',
4);
insert into task(description, db_id) values (
'Задание: 68 (Serge I: 2010-03-27)
Найти количество маршрутов, которые обслуживаются наибольшим числом рейсов.
Замечания:
1) A - B и B - A считать ОДНИМ И ТЕМ ЖЕ маршрутом.
2) Использовать только таблицу Trip',
4);
insert into task(description, db_id) values (
'Задание: 69 (Serge I: 2011-01-06)
По таблицам Income и Outcome для каждого пункта приема найти остатки денежных средств на конец каждого дня,
в который выполнялись операции по приходу и/или расходу на данном пункте.
Учесть при этом, что деньги не изымаются, а остатки/задолженность переходят на следующий день.
Вывод: пункт приема, день в формате dd/mm/yyyy, остатки/задолженность на конец этого дня.',
3);
insert into task(description, db_id) values (
'Задание: 70 (Serge I: 2003-02-14)
Укажите сражения, в которых участвовало по меньшей мере три корабля одной и той же страны.',
2);
insert into task(description, db_id) values (
'Задание: 71 (Serge I: 2008-02-23)
Найти тех производителей ПК, все модели ПК которых имеются в таблице PC.',
1);
insert into task(description, db_id) values (
'Задание: 72 (Serge I: 2003-04-29)
Среди тех, кто пользуется услугами только какой-нибудь одной компании, определить имена разных пассажиров, летавших чаще других. Вывести: имя пассажира и число полетов.',
4);
insert into task(description, db_id) values (
'Задание: 73 (Serge I: 2009-04-17)
Для каждой страны определить сражения, в которых не участвовали корабли данной страны.
Вывод: страна, сражение',
2);
insert into task(description, db_id) values (
'Задание: 74 (dorin_larsen: 2007-03-23)
Вывести классы всех кораблей России (Russia). Если в базе данных нет классов кораблей России, вывести классы для всех имеющихся в БД стран. Вывод: страна, класс',
2);
insert into task(description, db_id) values (
'Задание: 75 (Serge I: 2020-01-31)
Для тех производителей, у которых есть продукты с известной ценой хотя бы в одной из таблиц Laptop, PC, Printer найти максимальные цены на каждый из типов продукции.
Вывод: maker, максимальная цена на ноутбуки, максимальная цена на ПК, максимальная цена на принтеры.
Для отсутствующих продуктов/цен использовать NULL.',
1);
insert into task(description, db_id) values (
'Задание: 76 (Serge I: 2003-08-28)
Определить время, проведенное в полетах, для пассажиров, летавших всегда на разных местах. Вывод: имя пассажира, время в минутах.',
4);
insert into task(description, db_id) values (
'Задание: 77 (Serge I: 2003-04-09)
Определить дни, когда было выполнено максимальное число рейсов из
Ростова (Rostov). Вывод: число рейсов, дата.',
4);
insert into task(description, db_id) values (
'Задание: 78 (Serge I: 2005-01-19)
Для каждого сражения определить первый и последний день
месяца, в котором оно состоялось.
Вывод: сражение, первый день месяца, последний
день месяца.
Замечание: даты представить без времени в формате yyyy-mm-dd.',
2);
insert into task(description, db_id) values (
'Задание: 79 (Serge I: 2003-04-29)
Определить пассажиров, которые больше других времени провели в полетах.
Вывод: имя пассажира, общее время в минутах, проведенное в полетах',
4);
insert into task(description, db_id) values (
'Задание: 80 (Baser: 2011-11-11)
Найти производителей любой компьютерной техники, у которых нет моделей ПК, не представленных в таблице PC.',
1);
insert into task(description, db_id) values (
'Задание: 81 (Serge I: 2011-11-25)
Из таблицы Outcome получить все записи за тот месяц (месяцы), с учетом года, в котором суммарное значение расхода (out) было максимальным.',
3);
insert into task(description, db_id) values (
'Задание: 82 (Serge I: 2011-10-08)
В наборе записей из таблицы PC, отсортированном по столбцу code (по возрастанию) найти среднее значение цены для каждой шестерки подряд идущих ПК. Вывод: значение code, которое является первым в наборе из шести строк, среднее значение цены в наборе.',
1);
insert into task(description, db_id) values (
'Задание: 83 (dorin_larsen: 2006-03-14)
Определить названия всех кораблей из таблицы Ships, которые удовлетворяют, по крайней мере, комбинации любых четырёх критериев из следующего списка:
numGuns = 8, bore = 15, displacement = 32000, type = bb, launched = 1915, class = Kongo, country = USA',
2);
insert into task(description, db_id) values (
'Задание: 84 (Serge I: 2003-06-05)
Для каждой компании подсчитать количество перевезенных пассажиров (если они были в этом месяце) по декадам апреля 2003. При этом учитывать только дату вылета. Вывод: название компании, количество пассажиров за каждую декаду',
4);
insert into task(description, db_id) values (
'Задание: 85 (Serge I: 2012-03-16)
Найти производителей, которые выпускают только принтеры или только PC.
При этом искомые производители PC должны выпускать не менее 3 моделей.',
1);
insert into task(description, db_id) values (
'Задание: 86 (Serge I: 2012-04-20)
Для каждого производителя перечислить в алфавитном порядке с разделителем "/" все типы выпускаемой им продукции. Вывод: maker, список типов продукции',
1);
insert into task(description, db_id) values (
'Задание: 87 (Serge I: 2003-08-28)
Считая, что пункт самого первого вылета пассажира является местом жительства, найти не москвичей, которые прилетали в Москву более одного раза. Вывод: имя пассажира, количество полетов в Москву',
4);
insert into task(description, db_id) values (
'Задание: 88 (Serge I: 2003-04-29)
Среди тех, кто пользуется услугами только одной компании, определить имена разных пассажиров, летавших чаще других. Вывести: имя пассажира, число полетов и название компании.',
4);
insert into task(description, db_id) values (
'Задание: 89 (Serge I: 2012-05-04)
Найти производителей, у которых больше всего моделей в таблице Product, а также тех, у которых меньше всего моделей. Вывод: maker, число моделей',
1);
insert into task(description, db_id) values (
'Задание: 90 (Serge I: 2012-05-04)
Вывести все строки из таблицы Product, кроме трех строк с наименьшими номерами моделей и трех строк с наибольшими номерами моделей.',
1);
insert into task(description, db_id) values (
'Задание: 91 (Serge I: 2015-03-20)
C точностью до двух десятичных знаков определить среднее количество краски на квадрате.',
5);
insert into task(description, db_id) values (
'Задание: 92 (ZrenBy: 2003-09-01)
Выбрать все белые квадраты, которые окрашивались только из баллончиков, пустых к настоящему времени. Вывести имя квадрата',
5);
insert into task(description, db_id) values (
'Задание: 93 (Serge I: 2003-06-05)
Для каждой компании, перевозившей пассажиров, подсчитать время, которое провели в полете самолеты с пассажирами. Вывод: название компании, время в минутах.',
4);
insert into task(description, db_id) values (
'Задание: 94 (Serge I: 2003-04-09)
Для семи последовательных дней, начиная от минимальной даты, когда из Ростова было совершено максимальное число рейсов, определить число рейсов из Ростова. Вывод: дата, количество рейсов',
4);
insert into task(description, db_id) values (
'Задание: 95 (qwrqwr: 2013-02-08)
На основании информации из таблицы Pass_in_Trip, для каждой авиакомпании определить:
1) количество выполненных перелетов;
2) число использованных типов самолетов;
3) количество перевезенных различных пассажиров;
4) общее число перевезенных компанией пассажиров.
Вывод: Название компании, 1), 2), 3), 4).',
4);
insert into task(description, db_id) values (
'Задание: 96 (ZrenBy: 2003-09-01)
При условии, что баллончики с красной краской использовались более одного раза, выбрать из них такие, которыми окрашены квадраты, имеющие голубую компоненту. Вывести название баллончика',
5);
insert into task(description, db_id) values (
'Задание: 97 (qwrqwr: 2013-02-15)
Отобрать из таблицы Laptop те строки, для которых выполняется следующее условие:
значения из столбцов speed, ram, price, screen возможно расположить таким образом, что каждое последующее значение будет превосходить предыдущее в 2 раза или более.
Замечание: все известные характеристики ноутбуков больше нуля.
Вывод: code, speed, ram, price, screen.',
1);
insert into task(description, db_id) values (
'Задание: 98 (qwrqwr: 2010-04-26)
Вывести список ПК, для каждого из которых результат побитовой операции ИЛИ, примененной к двоичным представлениям скорости процессора и объема памяти, содержит последовательность из не менее четырех идущих подряд единичных битов. Вывод: код модели, скорость процессора, объем памяти.',
1);
insert into task(description, db_id) values (
'Задание: 99 (qwrqwr: 2013-03-01)
Рассматриваются только таблицы Income_o и Outcome_o. Известно, что прихода/расхода денег в воскресенье не бывает.
Для каждой даты прихода денег на каждом из пунктов определить дату инкассации по следующим правилам:
1. Дата инкассации совпадает с датой прихода, если в таблице Outcome_o нет записи о выдаче денег в эту дату на этом пункте.
2. В противном случае - первая возможная дата после даты прихода денег, которая не является воскресеньем и в Outcome_o не отмечена выдача денег сдатчикам вторсырья в эту дату на этом пункте.
Вывод: пункт, дата прихода денег, дата инкассации.',
3);
insert into task(description, db_id) values (
'Задание: 100 ($erges: 2009-06-05)
Написать запрос, который выводит все операции прихода и расхода из таблиц Income и Outcome в следующем виде:
дата, порядковый номер записи за эту дату, пункт прихода, сумма прихода, пункт расхода, сумма расхода.
При этом все операции прихода по всем пунктам, совершённые в течение одного дня, упорядочены по полю code, и так же все операции расхода упорядочены по полю code.
В случае, если операций прихода/расхода за один день было не равное количество, выводить NULL в соответствующих колонках на месте недостающих операций.',
3);
insert into task(description, db_id) values (
'Задание: 101 (qwrqwr: 2013-03-29)
Таблица Printer сортируется по возрастанию поля code.
Упорядоченные строки составляют группы: первая группа начинается с первой строки, каждая строка со значением color=n начинает новую группу, группы строк не перекрываются.
Для каждой группы определить: наибольшее значение поля model (max_model), количество уникальных типов принтеров (distinct_types_cou) и среднюю цену (avg_price).
Для всех строк таблицы вывести: code, model, color, type, price, max_model, distinct_types_cou, avg_price.',
1);
insert into task(description, db_id) values (
'Задание: 102 (Serge I: 2003-04-29)
Определить имена разных пассажиров, которые летали
только между двумя городами (туда и/или обратно).',
4);
insert into task(description, db_id) values (
'Задание: 103 (qwrqwr: 2013-05-17)
Выбрать три наименьших и три наибольших номера рейса. Вывести их в шести столбцах одной строки, расположив в порядке от наименьшего к наибольшему.
Замечание: считать, что таблица Trip содержит не менее шести строк.',
4);
insert into task(description, db_id) values (
'Задание: 104 (Serge I: 2013-07-19)
Для каждого класса крейсеров, число орудий которого известно, пронумеровать (последовательно от единицы) все орудия. Вывод: имя класса, номер орудия в формате bc-N.',
2);
insert into task(description, db_id) values (
'Задание: 105 (qwrqwr: 2013-09-11)
Статистики Алиса, Белла, Вика и Галина нумеруют строки у таблицы Product.
Все четверо упорядочили строки таблицы по возрастанию названий производителей.
Алиса присваивает новый номер каждой строке, строки одного производителя она упорядочивает по номеру модели.
Трое остальных присваивают один и тот же номер всем строкам одного производителя.
Белла присваивает номера начиная с единицы, каждый следующий производитель увеличивает номер на 1.
У Вики каждый следующий производитель получает такой же номер, какой получила бы первая модель этого производителя у Алисы.
Галина присваивает каждому следующему производителю тот же номер, который получила бы его последняя модель у Алисы.
Вывести: maker, model, номера строк получившиеся у Алисы, Беллы, Вики и Галины соответственно.',
1);
insert into task(description, db_id) values (
'Задание: 106 (Baser: 2013-09-06)
Пусть v1, v2, v3, v4, ... представляет последовательность вещественных чисел - объемов окрасок b_vol, упорядоченных по возрастанию b_datetime, b_q_id, b_v_id.
Найти преобразованную последовательность P1=v1, P2=v1/v2, P3=v1/v2*v3, P4=v1/v2*v3/v4, ..., где каждый следующий член получается из предыдущего умножением на vi (при нечетных i) или делением на vi (при четных i).
Результаты представить в виде b_datetime, b_q_id, b_v_id, b_vol, Pi, где Pi - член последовательности, соответствующий номеру записи i. Вывести Pi с 8-ю знаками после запятой.',
5);
insert into task(description, db_id) values (
'Задание: 107 (VIG: 2003-09-01)
Для пятого по счету пассажира из числа вылетевших из Ростова в апреле 2003 года определить компанию, номер рейса и дату вылета. Замечание: cчитать, что два рейса одновременно вылететь из Ростова не могут.',
4);
insert into task(description, db_id) values (
'Задание: 108 (Baser: 2013-10-16)
Реставрация экспонатов секции "Треугольники" музея ПФАН проводилась согласно техническому заданию. Для каждой записи таблицы utb малярами подкрашивалась сторона любой фигуры, если длина этой стороны равнялась b_vol.
Найти окрашенные со всех сторон треугольники, кроме равносторонних, равнобедренных и тупоугольных.
Для каждого треугольника (но без повторений) вывести три значения X, Y, Z, где X - меньшая, Y - средняя, а Z - большая сторона.',
5);
insert into task(description, db_id) values (
'Задание: 109 (qwrqwr: 2011-01-13)
Вывести:
1. Названия всех квадратов черного или белого цвета.
2. Общее количество белых квадратов.
3. Общее количество черных квадратов.',
5);
insert into task(description, db_id) values (
'Задание: 110 (Serge I: 2003-12-24)
Определить имена разных пассажиров, когда-либо летевших рейсом, который вылетел в субботу, а приземлился в воскресенье.',
4);
insert into task(description, db_id) values (
'Задание: 111 (Serge I: 2003-12-24)
Найти НЕ белые и НЕ черные квадраты, которые окрашены разными цветами в пропорции 1:1:1. Вывод: имя квадрата, количество краски одного цвета',
5);
insert into task(description, db_id) values (
'Задание: 112 (Serge I: 2003-12-24)
Какое максимальное количество черных квадратов можно было бы окрасить в белый цвет
оставшейся краской',
5);
insert into task(description, db_id) values (
'Задание: 113 (Serge I: 2003-12-24)
Сколько каждой краски понадобится, чтобы докрасить все Не белые квадраты до белого цвета.
Вывод: количество каждой краски в порядке (R,G,B)',
5);
insert into task(description, db_id) values (
'Задание: 114 (Serge I: 2003-04-08)
Определить имена разных пассажиров, которым чаще других доводилось лететь на одном и том же месте. Вывод: имя и количество полетов на одном и том же месте.',
4);
insert into task(description, db_id) values (
'Задание: 115 (Baser: 2013-11-01)
Рассмотрим равнобочные трапеции, в каждую из которых можно вписать касающуюся всех сторон окружность. Кроме того, каждая сторона имеет целочисленную длину из множества значений b_vol.
Вывести результат в 4 колонки: Up, Down, Side, Rad. Здесь Up - меньшее основание, Down - большее основание, Side - длины боковых сторон, Rad – радиус вписанной окружности (с 2-мя знаками после запятой).',
5);
insert into task(description, db_id) values (
'Задание: 116 (Velmont: 2013-11-19)
Считая, что каждая окраска длится ровно секунду, определить непрерывные интервалы времени с длительностью более 1 секунды из таблицы utB. Вывод: дата первой окраски в интервале, дата последней окраски в интервале.',
5);
insert into task(description, db_id) values (
'Задание: 117 (Serge I: 2013-11-29)
По таблице Classes для каждой страны найти максимальное значение среди трех выражений:
numguns*5000, bore*3000, displacement.
Вывод в три столбца:
- страна;
- максимальное значение;
- слово numguns - если максимум достигается для numguns*5000, слово bore - если максимум достигается для bore*3000, слово displacement - если максимум достигается для displacement.
Замечание. Если максимум достигается для нескольких выражений, выводить каждое из них отдельной строкой.',
2);
insert into task(description, db_id) values (
'Задание: 118 (qwrqwr: 2013-12-11)
Выборы Директора музея ПФАН проводятся только в високосный год, в первый вторник апреля после первого понедельника апреля.
Для каждой даты из таблицы Battles определить дату ближайших (после этой даты) выборов Директора музея ПФАН.
Вывод: сражение, дата сражения, дата выборов. Даты выводить в формате yyyy-mm-dd.',
2);
insert into task(description, db_id) values (
'Задание: 119 ($erges: 2008-04-25)
Сгруппировать все окраски по дням, месяцам и годам. Идентификатор каждой группы должен иметь вид yyyy для года, yyyy-mm для месяца и yyyy-mm-dd для дня.
Вывести только те группы, в которых количество различных моментов времени (b_datetime), когда выполнялась окраска, более 10.
Вывод: идентификатор группы, суммарное количество потраченной краски.',
5);
insert into task(description, db_id) values (
'Задание: 120 (mslava: 2004-01-05)
Для каждой авиакомпании, самолеты которой перевезли хотя бы одного пассажира, вычислить с точностью до двух десятичных знаков средние величины времени нахождения самолетов в воздухе (в минутах). Также рассчитать указанные характеристики по всем летавшим самолетам (использовать слово TOTAL).
Вывод: компания, среднее арифметическое, среднее геометрическое, среднее квадратичное, среднее гармоническое.
Для справки:
среднее арифметическое = (x1 + x2 + ... + xN)/N
среднее геометрическое = (x1 * x2 * ... * xN)^(1/N)
среднее квадратичное = sqrt((x1^2 + x2^2 + ... + xN^2)/N)
среднее гармоническое = N/(1/x1 + 1/x2 + ... + 1/xN)',
4);
insert into task(description, db_id) values (
'Задание: 121 (Serge I: 2005-05-23)
Найдите названия всех тех кораблей из базы данных, о которых можно определенно сказать, что они были спущены на воду до 1941 г.',
2);
insert into task(description, db_id) values (
'Задание: 122 (Serge I: 2003-08-28)
Считая, что первый пункт вылета является местом жительства, найти пассажиров, которые находятся вне дома. Вывод: имя пассажира, город проживания',
4);
insert into task(description, db_id) values (
'Задание: 123 (qwrqwr: 2014-11-07)
Для каждого производителя подсчитать: сколько имеется в наличии его продуктов (любого типа) с неуникальной для этого производителя ценой и количество таких неуникальных цен.
Вывод: производитель, количество продуктов, количество цен.',
1);
insert into task(description, db_id) values (
'Задание: 124 (DimaN: 2004-03-01)
Среди пассажиров, которые пользовались услугами не менее двух авиакомпаний, найти тех, кто совершил одинаковое количество полётов самолетами каждой из этих авиакомпаний. Вывести имена таких пассажиров.',
4);
insert into task(description, db_id) values (
'Задание: 125 (Baser: 2014-10-24)
Данные о продаваемых моделях и ценах (из таблиц Laptop, PC и Printer) объединить в одну таблицу LPP и создать в ней порядковую нумерацию (id) без пропусков и дубликатов.
Считать, что модели внутри каждой из трёх таблиц упорядочены по возрастанию поля code. Единую нумерацию записей LPP сделать по следующему правилу: сначала идут первые модели из таблиц (Laptop, PC и Printer), потом последние модели, далее - вторые модели из таблиц, предпоследние и т.д.
При исчерпании моделей определенного типа, нумеровать только оставшиеся модели других типов.
Вывести: id, type, model и price. Тип модели type является строкой Laptop, PC или Printer.',
1);
insert into task(description, db_id) values (
'Задание: 126 (Serge I: 2015-04-17)
Для последовательности пассажиров, упорядоченных по id_psg, определить того,
кто совершил наибольшее число полетов, а также тех, кто находится в последовательности непосредственно перед и после него. Для первого пассажира в последовательности предыдущим будет последний, а для последнего пассажира последующим будет первый. Для каждого пассажира, отвечающего условию, вывести: имя, имя предыдущего пассажира, имя следующего пассажира.',
4);
insert into task(description, db_id) values (
'Задание: 127 (qwrqwr: 2015-04-24)
Найти округленное до сотых долей среднее арифметическое следующих цен:
1. Цена самых дешевых Laptop-ов от производителей РС с самой низкой скоростью CD;
2. Цена самых дорогих РС от производителей самых дешевых принтеров;
3. Цена самых дорогих принтеров от производителей Laptop-ов с наибольшим объемом памяти.
Замечание: При расчёте среднего отсутствующие цены не учитывать.',
1);
insert into task(description, db_id) values (
'Задание: 128 (Shurgenz: 2006-08-05)
Определить лидера по сумме выплат в соревновании между каждой существующей парой пунктов с одинаковыми номерами из двух разных таблиц - outcome и outcome_o - на каждый день, когда осуществлялся прием вторсырья хотя бы на одном из них.
Вывод: Номер пункта, дата, текст:
- once a day, если сумма выплат больше у фирмы с отчетностью один раз в день;
- more than once a day, если - у фирмы с отчетностью несколько раз в день;
- both, если сумма выплат одинакова.',
3);
insert into task(description, db_id) values (
'Задание: 129 (Serge I: 2008-02-01)
Предполагая, что среди идентификаторов квадратов имеются пропуски, найти минимальный и максимальный свободный идентификатор в диапазоне между имеющимися максимальным и минимальным идентификаторами.
Например, для последовательности идентификаторов квадратов 1,2,5,7 результат должен быть 3 и 6.
Если пропусков нет, вместо каждого искомого значения выводить NULL.',
5);
insert into task(description, db_id) values (
'Задание: 130 (Velmont: 2015-08-14)
Историки решили составить отчет о битвах в два суперстолбца. Каждый суперстолбец состоит из трёх столбцов (номер битвы, название и дата).
Сначала в порядке возрастания номеров заполняется первый суперстолбец, потом - второй. Порядковый номер битве назначается согласно сортировке: дата, название.
С целью экономии бумаги, историки делят информацию из таблицы Battles поровну, занося в первый суперстолбец на одну битву больше при их нечетном количестве.
В таблицу с шестью колонками вывести результат работы историков, пустые места заполнить NULL-значениями.',
2);
insert into task(description, db_id) values (
'Задание: 131 (qwrqwr: 2010-09-24)
Выбрать из таблицы Trip такие города, названия которых содержат минимум 2 разные буквы из списка (a,e,i,o,u) и все имеющиеся в названии буквы из этого списка встречаются одинаковое число раз.',
4);
insert into task(description, db_id) values (
'Задание: 132 (qwrqwr: 2015-10-16)
Для каждой даты битвы (date1) взять дату следующей в хронологическом порядке битвы (date2), а если такой даты нет, то текущую дату.
Определить на дату date2 возраст человека, родившегося в дату date1 (число полных лет и полных месяцев).
Замечания:
1) считать, что полное число месяцев исполняется в дату дня рождения, или ранее, при условии, что более поздних дат в искомом месяце нет;
за полный год принимаются 12 полных месяцев; все битвы произошли в разные даты и до сегодняшнего дня.
2) даты представить без времени в формате yyyy-mm-dd, возраст в формате Y y., M m., не выводить год или месяц если они равны 0,
для возраста менее 1 мес. выводить пустую строку.
Вывод: возраст, date1, date2.',
2);
insert into task(description, db_id) values (
'Задание: 133 (yuriy.rozhok: 2007-03-24)
Пусть имеется некоторое подмножество S множества целых чисел. Назовем горкой с вершиной N последовательность чисел из S, в которой числа, меньшие N, выстроены (слева направо без разделителей) сначала возрастающей цепочкой, а потом – убывающей цепочкой, и значением N между ними.
Например , для S = {1, 2, …, 10} горка с вершиной 5 представляется такой последовательностью: 123454321. При S, состоящем из идентификаторов всех компаний, для каждой компании построить "горку", рассматривая ее идентификатор в качестве вершины.
Считать идентификаторы положительными числами и учесть, что в базе нет данных, при которых количество цифр в горке может превысить 70.
Вывод: id_comp, горка',
5);
insert into task(description, db_id) values (
'Задание: 134 (Serge I: 2003-12-26)
Выполняется докраска квадратов до белого цвета каждым цветом по следующей схеме:
- сначала закрашиваются квадраты, для которых требуется меньше краски соответствующего цвета;
- при одинаковом необходимом количестве краски сначала закрашиваются квадраты с меньшим q_id.
Найти идентификаторы НЕ белых квадратов, оставшихся после израсходования всей краски.',
5);
insert into task(description, db_id) values (
'Задание: 135 (Serge I: 2016-12-16)
В пределах каждого часа, в течение которого выполнялись окраски,
найти максимальное время окраски (B_DATETIME).',
5);
insert into task(description, db_id) values (
'Задание: 136 (Serge I: 2017-01-13)
Для каждого корабля из таблицы Ships, в имени которого есть символы, не являющиеся латинской буквой, вывести:
имя корабля, позиционный номер первого небуквенного символа в имени и сам символ.',
2);
insert into task(description, db_id) values (
'Задание: 137 (Serge I: 2005-01-19)
Для каждой пятой модели (в порядке возрастания номеров
моделей) из таблицы Product определить тип продукции и среднюю цену модели.',
1);
insert into task(description, db_id) values (
'Задание: 138 (Serge I: 2017-03-10)
Найти все уникальные пары нечёрных квадратов (q_id1 и q_id2), которые окрашивались одним и тем же множеством баллончиков. Вывод: q_id1, q_id2, где q_id1 < q_id2.',
5);
insert into task(description, db_id) values (
'Задание: 139 (Serge I: 2017-05-12)
Для каждого корабля, отсутствующего в таблице Outcomes, перечислить через запятую в хронологическом порядке сражения, в которых этот корабль не смог бы принять участие. Если таких сражений нет, вывести NULL.
Замечание. Считать, что корабль может принимать участие в сражениях, произошедших в год спуска корабля на воду.
Вывод: имя корабля, список сражений',
2);
insert into task(description, db_id) values (
'Задание: 140 (no_more: 2017-07-07)
Определить, сколько битв произошло в течение каждого десятилетия, начиная с даты первого сражения в базе данных и до даты последнего. Вывод: десятилетие в формате 1940s, количество битв.',
2);
insert into task(description, db_id) values (
'Задание: 141 (Serge I: 2017-11-03)
Для каждого из летавших пассажиров определить количество дней в апреле 2003 года, попавших в интервал между датами первого и последнего вылета пассажира включительно.
Вывести имя пассажира и количество дней.',
4);
insert into task(description, db_id) values (
'Задание: 142 (Serge I: 2003-08-28)
Среди пассажиров, летавших на самолетах только одного типа, определить тех, кто прилетал в один и тот же город не менее 2-х раз. Вывести имена пассажиров.',
4);
insert into task(description, db_id) values (
'Задание: 143 (Serge I: 2011-10-08)
Для каждого сражения определить день, являющийся последней пятницей месяца, в котором произошло данное сражение.
Вывод: сражение, дата сражения, дата последней пятницы месяца.
Даты представить в формате yyyy-mm-dd',
2);
insert into task(description, db_id) values (
'Задание: 144 (Serge I: 2019-01-04)
Найти производителей, которые производят PC как с самой низкой ценой, так и с самой высокой. Вывод: maker',
1);
insert into task(description, db_id) values (
'Задание: 145 (Serge I: 2019-01-04)
Для каждой пары последовательных дат, dt1 и dt2, поступления средств (таблица Income_o) найти сумму выдачи денег (таблица Outcome_o) в полуоткрытом интервале (dt1, dt2].
Вывод: сумма, левая граница интервала, правая граница интервала.',
3);
insert into task(description, db_id) values (
'Задание: 146 (Serge I: 2008-08-30)
Для ПК с максимальным кодом из таблицы PC вывести все его характеристики (кроме кода) в два столбца:
- название характеристики (имя соответствующего столбца в таблице PC);
- значение характеристики',
1);
insert into task(description, db_id) values (
'Задание: 147 (Serge I: 2011-02-11)
Пронумеровать строки из таблицы Product в следующем порядке: имя производителя в порядке убывания числа производимых им моделей (при одинаковом числе моделей имя производителя в алфавитном порядке по возрастанию), номер модели (по возрастанию).
Вывод: номер в соответствии с заданным порядком, имя производителя (maker), модель (model)',
1);
insert into task(description, db_id) values (
'Задание: 148 (Serge I: 2009-08-11)
Для таблицы Outcomes преобразовать названия кораблей, содержащих более одного пробела, следующим образом.
Заменить все символы между первым и последним пробелами (исключая сами эти пробелы) на символы звездочки (*)
в количестве, равном числу замененных символов.
Вывод: название корабля, преобразованное название корабля',
2);
insert into task(description, db_id) values (
'Задание: 149 (Kursist: 2019-06-28)
Найти минимальную верхнюю границу интервала ( MinTime >= B_DATETIME), в течение которого каждый из баллончиков в таблице UTB был использован хотя бы один раз.
Вывести названия разных баллончиков, которые принимали участие в окраске в момент MinTime.',
5);
insert into task(description, db_id) values (
'Задание: 150 (Serge I: 2019-07-05)
Для каждого пункта в таблице income определить минимальную (min_date) и максимальную (max_date) даты поступления средств.
В упорядоченной по времени последовательности всех записей в таблице income для каждого интервала [min_date, max_date]
определить по одной строке непосредственно выше (date1 < min_date) и непосредственно ниже (date2 > max_date).
Другими словами, требуется расширить каждый интервал на одну строку сверху и снизу. Если искомой строки/строк нет, считать значение date1/date2 неопределенным (NULL).
Вывод: point, date1, min_date, max_date, date2.',
3);
insert into task(description, db_id) values (
'Задание: 151 (Serge I: 2009-04-17)
Для каждого корабля из таблицы Ships указать название первого по времени сражения из таблицы Battles,
в котором корабль мог бы участвовать после спуска на воду. Если год спуска на воду неизвестен, взять последнее по времени сражение.
Если нет сражения, произошедшего после спуска на воду корабля, вывести NULL вместо названия сражения.
Считать, что корабль может участвовать во всех сражениях, которые произошли в год спуска на воду корабля.
Вывод: имя корабля, год спуска на воду, название сражения
Замечание: считать, что не существует двух битв, произошедших в один и тот же день.',
2);
insert into task(description, db_id) values (
'Задание: 152 (Serge I: 2020-01-24)
Рассматривается таблица Product. Упорядоченные по номеру модели принтеры образуют группы (model - номер группы).
В каждую группу (в порядке возрастания) добавляются по одной модели ПК в порядке возрастания номера модели.
После добавления ПК в последнюю группу процесс продолжается с первой группы до тех пор, пока не закончатся модели ПК.
Выполнить нумерацию в порядке по возрастанию: принтеры по номеру группы, затем модели ПК в группе.
Вывод: номер по порядку, model, type
Замечание. Модели ноутбуков не учитывать и не выводить.',
1);
insert into task(description, db_id) values (
'Задание: 153 (Serge I: 2003-04-08)
Определить имена разных пассажиров, летевших хотя бы два раза подряд на месте с одним и тем же номером.',
4);
insert into task(description, db_id) values (
'Задание: 154 (Kursist: 2020-04-17)
Считать, что во всех таблицах поле point с одним и тем же номером указывает на один и тот же пункт.
Для каждого пункта посчитать сумму расхода и прихода за каждый день когда были операции у этого пункта отдельно по таблицам с отчетностью один раз в день и отдельно с отчетностью несколько раз в день.
Если в один день у пункта были операции как по отчетности один раз в день, так и с отчетностью несколько раз в день, то такие данные не выводить. 
Вывод: пункт, дата, сумма прихода, сумма расхода, once - если тип отчетности один раз в день и several если несколько. Замечание: При отсутствии прихода/расхода выводить 0.',
3);
insert into task(description, db_id) values (
'Задание: 155 (pаparome: 2005-12-02)
Предполагая, что не существует номера рейса большего 65535,
вывести номер рейса и его представление в двоичной системе счисления (без ведущих нулей)',
4);
insert into task(description, db_id) values (
'Задание: 156 (Serge I: 2006-11-17)
Распределить по трем столбцам (построчно) квадраты из таблицы utq в порядке возрастания их идентификаторов.
Если последняя строка окажется незаполненной, использовать NULL для отсутствующих значений.
Например, для последовательности идентификаторов {1,2,3,4,5,6,7,8} результат должен выглядеть так:
1   2   3
4   5   6
7   8   NULL',
5);
insert into task(description, db_id) values (
'Задание: 157 (Kursist: 2021-09-17)
Для всех непотопленных кораблей из базы определить количество битв, в которых они участвовали.
Вывести название корабля, количество битв.',
2);
insert into task(description, db_id) values (
'Задание: 158 (Serge I: 2021-10-08)
Для таблицы outcome определить прирост расхода каждого дня относительно среднедневного расхода двух предшествующих дней (когда был расход).
Вывод: дата, прирост.',
3);
insert into task(description, db_id) values (
'Задание: 159 (Baser: 2021-02-26)
Для каждой окраски (t,q,v,vol) = (B_DATETIME,B_Q_ID,B_V_ID,B_VOL) определить предшествующую по времени окраску того же квадрата тем же баллончиком и вывести в таблицу (t,q,v,vol,tp,volp).
Если такой окраски не было, то установить для предыдущей tp = volp = NULL.',
5);
insert into task(description, db_id) values (
'Задание: 160 (Kursist: 2021-10-15)
Выведите имена пассажиров, которые побывали в наибольшем количестве разных городов, включая города отправления.',
4);
insert into task(description, db_id) values (
'Задание: 161 (Kursist: 2021-11-13)
Выведите страны, корабли которых не участвовали ни в одной битве.',
2);

-- Задачи типа DML добавляются сюда же, нумерация пойдет с 1001 (1-30 задача = 1001-1030)
insert into task(id, description, db_id) values (1000, '', 1);
delete from task where id = 1000;

insert into task(description, db_id) values (
'Задание: 1 (Serge I: 2004-09-08)
Добавить в таблицу PC следующую модель:
code: 20, model: 2111, speed: 950, ram: 512, hd: 60, cd: 52x, price: 1100',
1);
insert into task(description, db_id) values (
'Задание: 2 (Serge I: 2004-09-08)
Добавить в таблицу Product следующие продукты производителя Z:
принтер модели 4003, ПК модели 4001 и блокнот модели 4002',
1);
insert into task(description, db_id) values (
'Задание: 3 (Serge I: 2004-09-08)
Добавить в таблицу PC модель 4444 с кодом 22, имеющую скорость процессора 1200 и цену 1350. Отсутствующие характеристики должны быть восполнены значениями по умолчанию, принятыми для соответствующих столбцов.',
1);
insert into task(description, db_id) values (
'Задание: 4 (Serge I: 2004-09-08)
Для каждой группы блокнотов с одинаковым номером модели добавить запись в таблицу PC со следующими характеристиками:
код: минимальный код блокнота в группе +20;
модель: номер модели блокнота +1000;
скорость: максимальная скорость блокнота в группе;
ram: максимальный объем ram блокнота в группе *2;
hd: максимальный объем hd блокнота в группе *2;
cd: значение по умолчанию;
цена: максимальная цена блокнота в группе, уменьшенная в 1,5 раза.
Замечание. Считать номер модели числом.'
1);
insert into task(description, db_id) values (
'Задание: 5 (Serge I: 2004-09-08)
Удалить из таблицы PC компьютеры, имеющие минимальный объем диска или памяти.',
1);
insert into task(description, db_id) values (
'Задание: 6 (Serge I: 2004-09-08)
Удалить все блокноты, выпускаемые производителями, которые не выпускают принтеры. ',
1);
insert into task(description, db_id) values (
'Задание: 7 (Serge I: 2004-09-08)
Производство принтеров производитель A передал производителю Z. Выполнить соответствующее изменение.',
1);
insert into task(description, db_id) values (
'Задание: 8 (Serge I: 2004-09-08)
Удалите из таблицы Ships все корабли, потопленные в сражениях.',
2);
insert into task(description, db_id) values (
'Задание: 9 (Serge I: 2004-09-08)
Измените данные в таблице Classes так, чтобы калибры орудий измерялись в сантиметрах (1 дюйм=2,5см), а водоизмещение в метрических тоннах (1 метрическая тонна = 1,1 тонны). Водоизмещение вычислить с точностью до
целых.',
2);
insert into task(description, db_id) values (
'Задание: 10 (Serge I: 2004-09-09)
Добавить в таблицу PC те модели ПК из Product, которые отсутствуют в таблице PC.
При этом модели должны иметь следующие характеристики:
1. Код равен номеру модели плюс максимальный код, который был до вставки.
2. Скорость, объем памяти и диска, а также скорость CD должны иметь максимальные характеристики среди всех имеющихся в таблице PC.
3. Цена должна быть средней среди всех ПК, имевшихся в таблице PC до вставки.',
1);
insert into task(description, db_id) values (
'Задание: 11 (Serge I: 2004-09-09)
Для каждой группы блокнотов с одинаковым номером модели добавить запись в таблицу PC со следующими характеристиками:
код: минимальный код блокнота в группе +20;
модель: номер модели блокнота +1000;
скорость: максимальная скорость блокнота в группе;
ram: максимальный объем ram блокнота в группе *2;
hd: максимальный объем hd блокнота в группе *2;
cd: cd c максимальной скоростью среди всех ПК;
цена: максимальная цена блокнота в группе, уменьшенная в 1,5 раза',
1);
insert into task(description, db_id) values (
'Задание: 12 (Serge I: 2004-09-09)
Добавьте один дюйм к размеру экрана каждого блокнота,
выпущенного производителями E и B, и уменьшите его цену на $100.',
1);
insert into task(description, db_id) values (
'Задание: 13 (Serge I: 2004-09-09)
Ввести в базу данных информацию о том, что корабль Rodney был потоплен в битве, произошедшей 25/10/1944, а корабль Nelson поврежден - 28/01/1945.
Замечание: считать, что дата битвы уникальна в таблице Battles.',
2);
insert into task(description, db_id) values (
'Задание: 14 (Serge I: 2004-09-09)
Удалите классы, имеющие в базе данных менее трех кораблей (учесть корабли из Outcomes).',
2);

/* Принадлежность задачи к определенному уровню добавляется в автоматическом режиме (по индексу)
1-161 = тренировочные (учебные) задачи (ид = 1)
1001-1030 = задачи по DML (ид = 2)
1101 и выше = рейтинговые задачи (ид = 3)
*/
update task set stage_id = 1 where id <= 161;
update task set stage_id = 2 where id >= 1001 and id <= 1030;
update task set stage_id = 3 where id >= 1101;

-- Добавление записей о решении задач (сгруппировано по дням)
insert into progress(user_id, task_id, solved) values (1, 1, '2022-03-21');
insert into progress(user_id, task_id, solved) values (1, 2, '2022-03-21');
insert into progress(user_id, task_id, solved) values (1, 3, '2022-03-21');
insert into progress(user_id, task_id, solved) values (1, 4, '2022-03-21');
insert into progress(user_id, task_id, solved) values (1, 5, '2022-03-21');
insert into progress(user_id, task_id, solved) values (1, 6, '2022-03-21');

insert into progress(user_id, task_id, solved) values (1, 7, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 8, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 9, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 10, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 11, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 12, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 13, '2022-03-22');
insert into progress(user_id, task_id, solved) values (1, 14, '2022-03-22');

insert into progress(user_id, task_id, solved) values (1, 15, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 16, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 17, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 18, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 19, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 20, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 21, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 22, '2022-03-23');
insert into progress(user_id, task_id, solved) values (1, 23, '2022-03-23');

insert into progress(user_id, task_id, solved) values (1, 24, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 26, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 27, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 28, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 31, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 33, '2022-03-25');
insert into progress(user_id, task_id, solved) values (1, 38, '2022-03-25');

insert into progress(user_id, task_id, solved) values (1, 41, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 42, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 43, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 44, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 45, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 50, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 52, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 53, '2022-03-26');
insert into progress(user_id, task_id, solved) values (1, 70, '2022-03-26');

insert into progress(user_id, task_id, solved) values (1, 80, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 85, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 86, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 89, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 144, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 73, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 74, '2022-03-28');
insert into progress(user_id, task_id, solved) values (1, 78, '2022-03-28');

insert into progress(user_id, task_id, solved) values (1, 29, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 30, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 1001, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 1002, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 1003, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 1004, '2022-03-30');
insert into progress(user_id, task_id, solved) values (1, 1005, '2022-03-30');

insert into progress(user_id, task_id, solved) values (1, 1006, '2022-03-31');
insert into progress(user_id, task_id, solved) values (1, 1007, '2022-03-31');
insert into progress(user_id, task_id, solved) values (1, 1008, '2022-03-31');
insert into progress(user_id, task_id, solved) values (1, 1009, '2022-03-31');

insert into progress(user_id, task_id, solved) values (1, 1010, '2022-04-01');
insert into progress(user_id, task_id, solved) values (1, 1011, '2022-04-01');
insert into progress(user_id, task_id, solved) values (1, 1012, '2022-04-01');
insert into progress(user_id, task_id, solved) values (1, 1013, '2022-04-01');

insert into progress(user_id, task_id, solved) values (1, 25, '2022-04-02');
insert into progress(user_id, task_id, solved) values (1, 34, '2022-04-02');
insert into progress(user_id, task_id, solved) values (1, 40, '2022-04-02');
insert into progress(user_id, task_id, solved) values (1, 58, '2022-04-02');
insert into progress(user_id, task_id, solved) values (1, 75, '2022-04-02');
insert into progress(user_id, task_id, solved) values (1, 90, '2022-04-02');

insert into progress(user_id, task_id, solved) values (1, 146, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 59, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 60, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 61, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 62, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 64, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 69, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 81, '2022-04-04');
insert into progress(user_id, task_id, solved) values (1, 63, '2022-04-04');

insert into progress(user_id, task_id, solved) values (1, 66, '2022-04-05');
insert into progress(user_id, task_id, solved) values (1, 67, '2022-04-05');

insert into progress(user_id, task_id, solved) values (1, 76, '2022-04-06');
insert into progress(user_id, task_id, solved) values (1, 79, '2022-04-06');
insert into progress(user_id, task_id, solved) values (1, 95, '2022-04-06');
insert into progress(user_id, task_id, solved) values (1, 114, '2022-04-06');
insert into progress(user_id, task_id, solved) values (1, 142, '2022-04-06');
insert into progress(user_id, task_id, solved) values (1, 155, '2022-04-06');

insert into progress(user_id, task_id, solved) values (1, 92, '2022-04-07');
insert into progress(user_id, task_id, solved) values (1, 96, '2022-04-07');
insert into progress(user_id, task_id, solved) values (1, 109, '2022-04-07');
insert into progress(user_id, task_id, solved) values (1, 113, '2022-04-07');

-- Просмотр
select * from db;
select * from task;
select * from user;
select * from progress;

-- Функция представляет отношение части к целому в процентах (count к total)
create function percents(count int, total int)
returns decimal(5,2)
begin
	return count / total * 100;
end

-- Количество решенных задач по дням (solved_by_date)
create procedure solved_by_date(user_id int)
begin
	set @total_tasks = (select count(task.id) as count from task);
	select 
			user.name as user, 
			progress.solved as date, 
			count(task_id) as solved,
			concat(
				percents(
					count(task_id), @total_tasks
				), '%'
			) as progress,
			(select
				concat(percents(
					count(P.task_id), @total_tasks
				), '%')
			from progress as P
			join user
			on P.user_id = user_id
			where user.id = user_id and P.solved <= progress.solved  
			group by progress.solved
			) as total -- накопительный итог для прогресса
	from progress
	join user
	on progress.user_id = user_id
	where user.id = user_id
	group by progress.solved;
end

-- Количество решенных задач по каждой базе данных (solved_by_db)
create procedure solved_by_db(user_id int)
begin
	set @total_tasks = (select count(task.id) as count from task);
	select 
		S.user, S.db, S.solved, T.total,
		T.total - S.solved as remain,
		concat(percents(S.solved, T.total), '%') as progress
	from (
		select 
			user.name as user, 
			db.id,
			db.name as db, 
			count(progress.task_id) as solved
		from db
		join task on db.id = task.db_id 
		left join progress on progress.task_id = task.id and progress.user_id = user_id
		cross join user
		where user.id = user_id
		group by db.id
	) as S
	join ( 
		select 
			db.id,
			db.name as db, 
			count(task.id) as total
		from db
		join task
		on db.id = task.db_id
		group by db.id
	) as T
	on T.id = S.id
    union all 
	select -- статистическая строка по всем задачам
		user.name as user, 
        'TOTAL' as db,
		count(task_id) as solved,
		@total_tasks as total,
		@total_tasks - count(task_id) as remain,
		concat(percents(count(task.id), @total_tasks), '%') as progress
	from progress
	join task
	on progress.task_id = task.id
	join user
	on user.id = progress.user_id
	where user.id = user_id
	group by user.name;
end

-- Список всех задач со статусом решения (solved_by_task)
create procedure solved_by_task(user_id int, sorting_by_task boolean)
begin
	select 
		user.name as user,
		db.name as db,
		stage.name as stage,
		task.id as task, 
		(case  -- вспомогательный столбец (решена или не решена)
			when progress.solved is not null then 'solved'
			else 'skip'
		end) as status,
		progress.solved
	from task
	join db
	on task.db_id = db.id
	left join progress
	on progress.task_id = task.id and progress.user_id = user_id
    left join stage
    on stage.id = task.stage_id
	cross join user
	where user.id = user_id
	order by
		case -- sorting_by_task определяет порядок сортировки (по базам или по нумерации задач)
			when sorting_by_task then task.id
            else db.id
		end, 	
        case
			when sorting_by_task then db.id 
            else task.id
		end; 
end

-- Просмотр
call solved_by_date(1);
call solved_by_db(1);
call solved_by_task(1, false);